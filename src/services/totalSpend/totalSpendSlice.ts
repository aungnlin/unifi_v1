import { createSlice } from "@reduxjs/toolkit";
import fakeExpenseList from "../ListOfTransactions/fakeExpenseList";
import { RootState } from "../../app/store";

//////////////////////////////
//  Start of analysis
//////////////////////////////
// const currentDate = useSelector(selectcurrentDate);
// const date_formatted = new Date(currentDate);
// const month = date_formatted.toLocaleString("en-US", { month: "short" });
// const day = date_formatted.toLocaleString("en-US", { day: "2-digit" });
// const year = date_formatted.getFullYear();

// Filtering for the current month
const input_AllTransactions = [...fakeExpenseList];
// console.log(input_AllTransactions);

const thisMonthTrans = fakeExpenseList.filter((trans) =>
  trans.date.includes("-Aug")
);

const input_TSM = thisMonthTrans.reduce((total, item) => {
  return Number(total) + Number(item.amount);
}, 0);
const input_transList = [...thisMonthTrans];

// Filtering for the last month
const lastMonthTrans = fakeExpenseList.filter((trans) =>
  trans.date.includes("-Jul")
);
// const lastMonth_TSM = lastMonthTrans.reduce((total, item) => {
//   return Number(total) + Number(item.amount);
// }, 0);
const lastMonth_transList = [...lastMonthTrans];

const fakeBudget = [
  { name: "Food", categories: "food", amount: 200 },
  { name: "Groceries", categories: "groceries", amount: 150 },
  { name: "Transportation", categories: "transportation", amount: 50 },
  { name: "School", categories: "school", amount: 100 },
  { name: "Total", categories: "total", amount: 500 },
];

//////////////////////////////
// All the initial state
//////////////////////////////
const initialState = {
  TSM: input_TSM,
  transList: input_transList,
  lastMonthTransList: lastMonth_transList,
  status: "idle",
  currentDate: "2022-8-18",
  currentBudget: fakeBudget,
  inputTransactions: input_AllTransactions,
  piggyBank: 200,
};

// export const incrementAsync = createAsyncThunk(
//   "counter/fetchCount",
//   async (amount) => {
//     const response = await fetchCount(amount);
//     return response.data;
//   }
// );

export const totalSpendSlice = createSlice({
  name: "totalspend",
  initialState,

  reducers: {
    // Original Reducers
    incrementTSM: (state) => {
      state.TSM += 5;
    },
    decrementTSM: (state) => {
      state.TSM -= 5;
    },
    incrementTSMByAmount: (state, action) => {
      state.TSM += action.payload;
    },
    updatetransList: (state, action) => {
      state.transList = action.payload;
    },
    updatecurrentBudget: (state, action) => {
      state.currentBudget = action.payload;
    },
    updatepiggyBank: (state, action) => {
      state.piggyBank = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = "loading";
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = "idle";
  //       state.TSM += action.payload;
  //     });
  // },
});

export const {
  incrementTSM,
  decrementTSM,
  incrementTSMByAmount,
  updatetransList,
  updatecurrentBudget,
  updatepiggyBank,
} = totalSpendSlice.actions;

// Selectors
export const selectTotalBalance = (state: RootState) => state.cfm.TotalBalance;
export const selectTSM = (state: RootState) => state.totalSpend.TSM;
export const selecttransList = (state: RootState) => state.totalSpend.transList;
export const selectinputTransactions = (state: RootState) =>
  state.totalSpend.inputTransactions;
export const selectlastMonthTransList = (state: RootState) =>
  state.totalSpend.lastMonthTransList;
export const selectcurrentDate = (state: RootState) =>
  state.totalSpend.currentDate;
export const selectccurrentBudget = (state: RootState) =>
  state.totalSpend.currentBudget;
export const selectpiggyBank = (state: RootState) => state.totalSpend.piggyBank;

export default totalSpendSlice.reducer;
